$OpenBSD: patch-openbsd_OpenBSDProcessList_c,v 1.4 2020/12/08 16:23:17 sthen Exp $

Don't include "offline" CPUs in the stats (i.e. CPUs which have been
disabled by sysctl hw.smt=0).

Index: openbsd/OpenBSDProcessList.c
--- openbsd/OpenBSDProcessList.c.orig
+++ openbsd/OpenBSDProcessList.c
@@ -30,24 +30,36 @@ in the source distribution for its full text.
 static long fscale;
 
 ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidMatchList, uid_t userId) {
-   int mib[] = { CTL_HW, HW_NCPU };
+   int nmib[] = { CTL_HW, HW_NCPU };
+   int mib[] = { CTL_HW, HW_NCPUONLINE };
    int fmib[] = { CTL_KERN, KERN_FSCALE };
-   int i, e;
+   int ncmib[] = { CTL_KERN, KERN_CPUSTATS, 0 };
+   int i, e, ncpu, cpu_index_c;
    OpenBSDProcessList* opl;
    ProcessList* pl;
-   size_t size;
+   size_t size, size_ncpu, size_cpustats;
    char errbuf[_POSIX2_LINE_MAX];
+   struct cpustats cpu_stats;
 
    opl = xCalloc(1, sizeof(OpenBSDProcessList));
    pl = (ProcessList*) opl;
    size = sizeof(pl->cpuCount);
+   size_ncpu = sizeof(int);
+   size_cpustats = sizeof(cpu_stats);
+   cpu_index_c = 0;
    ProcessList_init(pl, Class(OpenBSDProcess), usersTable, pidMatchList, userId);
 
    e = sysctl(mib, 2, &pl->cpuCount, &size, NULL, 0);
    if (e == -1 || pl->cpuCount < 1) {
       pl->cpuCount = 1;
    }
+   e = sysctl(nmib, 2, &ncpu, &size_ncpu, NULL, 0);
+   if (e == -1) {
+       ncpu = pl->cpuCount;
+   }
+
    opl->cpus = xCalloc(pl->cpuCount + 1, sizeof(CPUData));
+   opl->cpuIndex = xRealloc(opl->cpuIndex, pl->cpuCount * sizeof(int));
 
    size = sizeof(fscale);
    if (sysctl(fmib, 2, &fscale, &size, NULL, 0) < 0) {
@@ -65,6 +77,19 @@ ProcessList* ProcessList_new(UsersTable* usersTable, H
       errx(1, "kvm_open: %s", errbuf);
    }
 
+   for (i = 0; i < ncpu; i++) {
+      ncmib[2] = i;
+      sysctl(ncmib, 3, &cpu_stats, &size_cpustats, NULL, 0);
+      if (cpu_stats.cs_flags & CPUSTATS_ONLINE) {
+         opl->cpuIndex[cpu_index_c] = i;
+	 cpu_index_c++;
+      }
+      
+      if (cpu_index_c == pl->cpuCount) {
+	break;
+      }
+   }
+
    return pl;
 }
 
@@ -323,7 +348,7 @@ static void OpenBSDProcessList_scanCPUTime(OpenBSDProc
    u_int64_t avg[CPUSTATES] = {0};
 
    for (int i = 0; i < this->super.cpuCount; i++) {
-      getKernelCPUTimes(i, kernelTimes);
+      getKernelCPUTimes(this->cpuIndex[i], kernelTimes);
       CPUData* cpu = this->cpus + i + 1;
       kernelCPUTimesToHtop(kernelTimes, cpu);
 
